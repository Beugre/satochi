#!/usr/bin/env python3
"""
üß™ TEST ORDRES SL/TP - Validation du syst√®me d'ordres automatiques
Place des ordres Take Profit et Stop Loss sur les positions actuelles
"""

import asyncio
import logging
import sys
import os
import pandas as pd
from datetime import datetime
from typing import Dict, List, Tuple

# Chargement des variables d'environnement
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    print("‚ö†Ô∏è python-dotenv non install√©, utilisation variables syst√®me")

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# Ajout du r√©pertoire parent au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import TradingConfig, APIConfig, RiskManagementConfig
from data_fetcher import DataFetcher
from trade_executor import TradeExecutor
from indicators import TechnicalIndicators


class ExitOrderTester:
    """Testeur d'ordres de sortie pour positions existantes"""
    
    def __init__(self):
        self.config = TradingConfig()
        self.api_config = APIConfig()
        self.risk_config = RiskManagementConfig()
        self.logger = logging.getLogger(__name__)
        
        # Initialisation du data fetcher
        self.data_fetcher = DataFetcher(
            api_key=self.api_config.BINANCE_API_KEY,
            secret_key=self.api_config.BINANCE_SECRET_KEY,
            testnet=self.api_config.BINANCE_TESTNET
        )
        
        # Initialisation du trade executor pour utiliser ses m√©thodes de formatage
        # Nous n'avons besoin que des m√©thodes de formatage, pas des autres services
        self.trade_executor = TradeExecutor(
            data_fetcher=self.data_fetcher,
            config=self.config,
            risk_config=self.risk_config,
            firebase_logger=None,
            telegram_notifier=None
        )
        
        # Initialisation des indicateurs techniques
        self.indicators = TechnicalIndicators(config=self.config)
        
        self.logger.info("üß™ Test Exit Orders initialis√©")
    
    async def cancel_existing_orders(self, symbol: str):
        """Annule tous les ordres existants pour un symbole pour lib√©rer le solde"""
        try:
            # R√©cup√©ration de tous les ordres via l'historique r√©cent
            import time
            current_time = int(time.time() * 1000)
            start_time = current_time - (24 * 60 * 60 * 1000)  # 24h en arri√®re
            
            # Utilisation de la m√©thode get_orders du data_fetcher
            orders = await self.data_fetcher.get_orders(symbol, start_time)
            
            open_orders = [o for o in orders if o['status'] in ['NEW', 'PARTIALLY_FILLED']]
            
            if open_orders:
                self.logger.info(f"üóëÔ∏è Annulation de {len(open_orders)} ordre(s) existant(s) pour {symbol}")
                for order in open_orders:
                    try:
                        result = await self.data_fetcher.cancel_order(symbol, str(order['orderId']))
                        self.logger.info(f"‚úÖ Ordre {order['orderId']} annul√© ({order['type']} {order['side']})")
                    except Exception as e:
                        self.logger.warning(f"‚ö†Ô∏è Erreur annulation ordre {order['orderId']}: {e}")
            else:
                self.logger.info(f"‚úÖ Aucun ordre ouvert trouv√© pour {symbol}")
                
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Erreur recherche ordres existants {symbol}: {e}")

    async def get_current_positions(self) -> List[Dict]:
        """R√©cup√®re les positions actuelles avec solde > 0"""
        try:
            balances = await self.data_fetcher.get_account_balance()
            positions = []
            
            for asset, balance_info in balances.items():
                free_balance = float(balance_info['free'])
                locked_balance = float(balance_info['locked'])
                total_balance = free_balance + locked_balance
                
                # Ignorer USDC et les petits soldes
                if (asset != 'USDC' and 
                    total_balance > 0.001 and  # Seuil minimum
                    free_balance > 0):  # Doit avoir du solde libre pour vendre
                    
                    # Construire le symbole de trading
                    symbol = f"{asset}USDC"
                    
                    # V√©rifier que la paire existe
                    try:
                        ticker = await self.data_fetcher.get_ticker_price(symbol)
                        current_price = float(ticker['price'])
                        
                        positions.append({
                            'asset': asset,
                            'symbol': symbol,
                            'quantity': free_balance,
                            'current_price': current_price,
                            'value_usdc': free_balance * current_price
                        })
                        
                    except Exception as e:
                        self.logger.warning(f"‚ö†Ô∏è Paire {symbol} non trouv√©e: {e}")
            
            return positions
        
        except Exception as e:
            self.logger.error(f"‚ùå Erreur r√©cup√©ration positions: {e}")
            return []
    
    async def format_quantity(self, symbol: str, quantity: float) -> float:
        """Utilise la m√©thode de formatage du TradeExecutor"""
        return await self.trade_executor._format_quantity(symbol, quantity)
    
    async def format_price(self, symbol: str, price: float) -> float:
        """Utilise la m√©thode de formatage du TradeExecutor"""
        return await self.trade_executor._format_price(symbol, price)
    
    async def get_rsi_distribution_strategy(self, symbol: str) -> Tuple[float, float, str]:
        """
        Calcule le RSI et retourne la strat√©gie de r√©partition optimale
        Returns: (sl_percentage, tp_percentage, strategy_name)
        """
        try:
            # R√©cup√©ration des donn√©es historiques (100 bougies pour RSI fiable)
            klines = await self.data_fetcher.get_klines(symbol, "1h", 100)
            
            if not klines or len(klines) < 50:
                self.logger.warning(f"‚ö†Ô∏è Donn√©es insuffisantes pour RSI {symbol} - Strat√©gie √©quilibr√©e par d√©faut")
                return 50.0, 50.0, "Neutre (donn√©es insuffisantes)"
            
            # Extraction des prix de cl√¥ture
            closes = [float(kline[4]) for kline in klines]  # Index 4 = close price
            closes_series = pd.Series(closes)  # Convertir en Series pandas
            
            # Calcul du RSI
            rsi_values = self.indicators.calculate_rsi(closes_series, period=14)
            current_rsi = float(rsi_values.iloc[-1])  # Dernier RSI
            
            # Strat√©gie de r√©partition bas√©e sur RSI
            if current_rsi > 70:
                # March√© SURACHET√â ‚Üí Privil√©gier les profits
                sl_pct, tp_pct = 30.0, 70.0
                strategy = f"Surachet√© (RSI: {current_rsi:.1f})"
                self.logger.info(f"üìà {symbol} - March√© SURACHET√â: RSI {current_rsi:.1f} ‚Üí Privil√©gier profits (30% SL / 70% TP)")
            elif current_rsi < 30:
                # March√© SURVENDU ‚Üí Prot√©ger le capital
                sl_pct, tp_pct = 80.0, 20.0
                strategy = f"Survendu (RSI: {current_rsi:.1f})"
                self.logger.info(f"üìâ {symbol} - March√© SURVENDU: RSI {current_rsi:.1f} ‚Üí Prot√©ger capital (80% SL / 20% TP)")
            else:
                # March√© NEUTRE ‚Üí Approche √©quilibr√©e
                sl_pct, tp_pct = 50.0, 50.0
                strategy = f"Neutre (RSI: {current_rsi:.1f})"
                self.logger.info(f"‚öñÔ∏è {symbol} - March√© NEUTRE: RSI {current_rsi:.1f} ‚Üí Approche √©quilibr√©e (50% SL / 50% TP)")
            
            return sl_pct, tp_pct, strategy
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Erreur calcul RSI pour {symbol}: {e} - Strat√©gie √©quilibr√©e par d√©faut")
            return 50.0, 50.0, "Neutre (erreur calcul RSI)"
    
    async def place_exit_orders_for_position(self, position: Dict) -> Dict:
        """Place les ordres SL/TP pour une position - VERSION AM√âLIOR√âE pour fiabilit√© maximale"""
        symbol = position['symbol']
        current_price = position['current_price']
        quantity = position['quantity']
        
        # üîç V√©rification du solde r√©el disponible - RAFRA√éCHI AVANT CHAQUE ORDRE
        try:
            balances = await self.data_fetcher.get_account_balance()
            asset = position['asset']
            available_balance = float(balances[asset]['free'])
            
            # Utiliser 99% du solde disponible pour √©viter les erreurs de pr√©cision
            safe_quantity = min(quantity, available_balance * 0.99)
            
            if safe_quantity < quantity:
                self.logger.warning(f"‚ö†Ô∏è Ajustement quantit√© {symbol}: {quantity:.6f} ‚Üí {safe_quantity:.6f} (99% du solde libre)")
            
            quantity = safe_quantity
            
            # V√©rification minimum - si trop petit, skip
            if quantity < 0.000001:
                self.logger.warning(f"‚ö†Ô∏è Quantit√© {symbol} trop petite: {quantity:.8f} - Position ignor√©e")
                return {
                    'symbol': symbol,
                    'tp_order_placed': False,
                    'sl_order_placed': False,
                    'tp_order_id': None,
                    'sl_order_id': None,
                    'errors': ['Quantit√© trop petite']
                }
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Erreur v√©rification solde pour {symbol}: {e}")
        
        # üöÄ NOUVELLE STRAT√âGIE ADAPTATIVE RSI : R√©partition intelligente bas√©e sur les conditions de march√©
        # Calcul de la strat√©gie optimale selon le RSI
        sl_percentage, tp_percentage, strategy_name = await self.get_rsi_distribution_strategy(symbol)
        
        # Calcul des quantit√©s optimales pour garantir SL avec valeur NOTIONAL suffisante
        
        # Calcul du prix SL pour estimer la valeur NOTIONAL
        stop_loss_price_estimate = current_price * (1 - self.config.STOP_LOSS_PERCENT / 100)
        
        # Quantit√© minimale pour SL (5 USDC / prix SL + marge)
        min_sl_quantity_for_notional = (6.0 / stop_loss_price_estimate) * 1.1  # +10% de marge
        
        # Formatage de la quantit√© totale - AVEC V√âRIFICATION SUPPL√âMENTAIRE
        try:
            formatted_quantity = await self.format_quantity(symbol, quantity)
            
            # Double v√©rification - si formatage donne 0, on essaie une approche diff√©rente
            if formatted_quantity <= 0:
                # R√©cup√©ration manuelle des r√®gles de formatage
                symbol_info = await self.data_fetcher.get_symbol_info(symbol)
                if symbol_info and 'filters' in symbol_info:
                    lot_size_filter = next((f for f in symbol_info['filters'] if f['filterType'] == 'LOT_SIZE'), None)
                    if lot_size_filter:
                        step_size = float(lot_size_filter['stepSize'])
                        # Arrondir √† la step_size inf√©rieure
                        formatted_quantity = (quantity // step_size) * step_size
                        self.logger.info(f"üîß Formatage manuel quantit√© {symbol}: {quantity:.8f} ‚Üí {formatted_quantity:.8f}")
                
            if formatted_quantity <= 0:
                self.logger.warning(f"‚ö†Ô∏è Formatage quantit√© {symbol} impossible: {quantity:.8f} ‚Üí {formatted_quantity:.8f}")
                return {
                    'symbol': symbol,
                    'tp_order_placed': False,
                    'sl_order_placed': False,
                    'tp_order_id': None,
                    'sl_order_id': None,
                    'errors': ['Formatage quantit√© impossible']
                }
            
            # üéØ STRAT√âGIE ADAPTATIVE RSI DE R√âPARTITION
            # R√©partition bas√©e sur les conditions de march√© (RSI)
            if formatted_quantity > min_sl_quantity_for_notional * 1.5:  # Seuil plus bas pour permettre plus de r√©partitions
                
                # Calcul des quantit√©s selon la strat√©gie RSI
                sl_target_quantity = formatted_quantity * (sl_percentage / 100)
                tp_target_quantity = formatted_quantity * (tp_percentage / 100)
                
                # S'assurer que la quantit√© SL respecte le minimum NOTIONAL
                if sl_target_quantity < min_sl_quantity_for_notional:
                    sl_target_quantity = min_sl_quantity_for_notional
                    tp_target_quantity = formatted_quantity - sl_target_quantity
                
                # Formatage des quantit√©s finales
                reserved_sl_quantity = await self.format_quantity(symbol, sl_target_quantity)
                tp_quantity = await self.format_quantity(symbol, tp_target_quantity)
                
                # V√©rifier que les quantit√©s format√©es sont valides
                if reserved_sl_quantity > 0 and tp_quantity > 0:
                    # V√©rifier que la valeur NOTIONAL SL est suffisante
                    estimated_notional = reserved_sl_quantity * stop_loss_price_estimate
                    if estimated_notional >= 5.0:
                        self.logger.info(f"üß† Strat√©gie RSI {strategy_name} pour {symbol}:")
                        self.logger.info(f"   üìä Total: {formatted_quantity:.8f}")
                        self.logger.info(f"   üéØ TP ({tp_percentage:.0f}%): {tp_quantity:.8f}")
                        self.logger.info(f"   üõ°Ô∏è SL ({sl_percentage:.0f}%): {reserved_sl_quantity:.8f} (‚âà{estimated_notional:.2f} USDC)")
                        
                        # Utiliser les quantit√©s calcul√©es selon RSI
                        tp_order_quantity = tp_quantity
                        sl_reserved_quantity = reserved_sl_quantity
                    else:
                        # Quantit√© SL trop petite en valeur, mode standard
                        tp_order_quantity = formatted_quantity
                        sl_reserved_quantity = None
                        self.logger.info(f"‚ö†Ô∏è Quantit√© SL RSI {symbol} trop petite ({estimated_notional:.2f} USDC < 5 USDC) - Mode standard")
                else:
                    # Formatage √©chou√©, mode standard
                    tp_order_quantity = formatted_quantity
                    sl_reserved_quantity = None
                    self.logger.info(f"‚ö†Ô∏è Formatage quantit√©s RSI {symbol} impossible - Mode standard")
            else:
                # Si quantit√© insuffisante pour diviser selon RSI, utiliser toute la quantit√© pour TP
                tp_order_quantity = formatted_quantity
                sl_reserved_quantity = None
                self.logger.info(f"‚ö†Ô∏è Quantit√© {symbol} insuffisante pour r√©partition RSI - Mode standard")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur formatage quantit√© {symbol}: {e}")
            return {
                'symbol': symbol,
                'tp_order_placed': False,
                'sl_order_placed': False,
                'tp_order_id': None,
                'sl_order_id': None,
                'errors': [f'Erreur formatage: {e}']
            }
        
        # Calcul des prix SL/TP - M√äME LOGIQUE que TradeExecutor
        take_profit_price = current_price * (1 + self.config.TAKE_PROFIT_PERCENT / 100)
        stop_loss_price = current_price * (1 - self.config.STOP_LOSS_PERCENT / 100)
        
        # Formatage des prix - M√äME M√âTHODE que TradeExecutor
        take_profit_price = await self.format_price(symbol, take_profit_price)
        stop_loss_price = await self.format_price(symbol, stop_loss_price)
        
        self.logger.info(f"\nüìä Position {symbol} - Strat√©gie: {strategy_name}")
        self.logger.info(f"   üí∞ Prix actuel: {current_price:.6f} USDC")
        self.logger.info(f"   üìè Quantit√© totale: {quantity:.6f}")
        if sl_reserved_quantity:
            self.logger.info(f"   üéØ TP ({tp_percentage:.0f}%): {tp_order_quantity:.6f}")
            self.logger.info(f"   üõ°Ô∏è SL ({sl_percentage:.0f}%): {sl_reserved_quantity:.6f}")
        else:
            self.logger.info(f"   üìè Quantit√© format√©e: {tp_order_quantity:.6f}")
        self.logger.info(f"   üéØ Take Profit: {take_profit_price:.6f} USDC (+{self.config.TAKE_PROFIT_PERCENT}%)")
        self.logger.info(f"   üõ°Ô∏è Stop Loss: {stop_loss_price:.6f} USDC (-{self.config.STOP_LOSS_PERCENT}%)")
        
        result = {
            'symbol': symbol,
            'tp_order_placed': False,
            'sl_order_placed': False,
            'tp_order_id': None,
            'sl_order_id': None,
            'errors': []
        }
        
        # üî• R√âPLICATION EXACTE DE _setup_exit_orders
        try:
            # V√©rification des types d'ordres support√©s - M√äME CODE
            symbol_info = await self.data_fetcher.get_symbol_info(symbol)
            supported_order_types = symbol_info.get('orderTypes', []) if symbol_info else []
            
            self.logger.info(f"üìã Types d'ordres support√©s pour {symbol}: {supported_order_types}")
            
            # 1. Ordre Take Profit - STRAT√âGIE ROBUSTE AVEC RETRY
            tp_order_placed = False
            
            # Rafra√Æchir le solde avant chaque ordre pour √©viter les conflicts
            try:
                fresh_balances = await self.data_fetcher.get_account_balance()
                fresh_available = float(fresh_balances[position['asset']]['free'])
                if fresh_available < tp_order_quantity:
                    # Re-calculer avec le solde le plus r√©cent
                    tp_order_quantity = await self.format_quantity(symbol, fresh_available * 0.99)
                    self.logger.info(f"üîÑ Quantit√© TP re-ajust√©e {symbol}: ‚Üí {tp_order_quantity:.8f} (solde frais)")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è Erreur rafra√Æchissement solde: {e}")
            
            # Essai TAKE_PROFIT_LIMIT d'abord (recommand√© pour Spot)
            if 'TAKE_PROFIT_LIMIT' in supported_order_types and tp_order_quantity > 0:
                try:
                    tp_order = await self.data_fetcher.place_order(
                        symbol=symbol,
                        side="SELL",
                        order_type="TAKE_PROFIT_LIMIT",
                        quantity=tp_order_quantity,
                        price=take_profit_price,
                        stopPrice=take_profit_price,
                        timeInForce="GTC"
                    )
                    result['tp_order_id'] = tp_order['orderId']
                    self.logger.info(f"‚úÖ TP automatique (TAKE_PROFIT_LIMIT) plac√©: {take_profit_price:.6f} USDC (ID: {tp_order['orderId']})")
                    tp_order_placed = True
                except Exception as e:
                    error_msg = f"TAKE_PROFIT_LIMIT: {e}"
                    result['errors'].append(error_msg)
                    self.logger.error(f"‚ùå Erreur {error_msg}")
            
            # Fallback: TAKE_PROFIT (SANS timeInForce - pas support√©)
            if not tp_order_placed and 'TAKE_PROFIT' in supported_order_types and tp_order_quantity > 0:
                try:
                    tp_order = await self.data_fetcher.place_order(
                        symbol=symbol,
                        side="SELL",
                        order_type="TAKE_PROFIT",
                        quantity=tp_order_quantity,
                        stopPrice=take_profit_price
                        # timeInForce pas support√© pour TAKE_PROFIT
                    )
                    result['tp_order_id'] = tp_order['orderId']
                    self.logger.info(f"‚úÖ TP automatique (TAKE_PROFIT) plac√©: {take_profit_price:.6f} USDC (ID: {tp_order['orderId']})")
                    tp_order_placed = True
                except Exception as e:
                    error_msg = f"TAKE_PROFIT: {e}"
                    result['errors'].append(error_msg)
                    self.logger.error(f"‚ùå Erreur {error_msg}")
            
            # Fallback final: LIMIT classique
            if not tp_order_placed and 'LIMIT' in supported_order_types and tp_order_quantity > 0:
                try:
                    tp_order = await self.data_fetcher.place_order(
                        symbol=symbol,
                        side="SELL",
                        order_type="LIMIT",
                        quantity=tp_order_quantity,
                        price=take_profit_price,
                        timeInForce="GTC"
                    )
                    result['tp_order_id'] = tp_order['orderId']
                    self.logger.info(f"‚úÖ TP automatique (LIMIT) plac√©: {take_profit_price:.6f} USDC (ID: {tp_order['orderId']})")
                    tp_order_placed = True
                except Exception as e:
                    error_msg = f"LIMIT TP: {e}"
                    result['errors'].append(error_msg)
                    self.logger.error(f"‚ùå Erreur ordre TP LIMIT: {e}")
            
            if not tp_order_placed:
                self.logger.warning(f"‚ö†Ô∏è Impossible de placer TP automatique pour {symbol}")
            
            result['tp_order_placed'] = tp_order_placed
            
            # 2. Ordre Stop Loss avec Trailing Stop - STRAT√âGIE SUPER ROBUSTE
            sl_order_placed = False
            
            # Conversion du pourcentage en BIPS pour trailing stop (ex: 0.3% -> 30 BIPS)
            trailing_delta_bips = int(self.config.TRAILING_STOP_DISTANCE * 100) if self.config.TRAILING_STOP_ENABLED else None
            
            # üéØ NOUVELLE LOGIQUE: Utiliser la quantit√© r√©serv√©e si disponible
            sl_quantity_to_use = sl_reserved_quantity
            
            # Si pas de r√©servation, utiliser l'ancienne m√©thode (solde restant)
            if sl_reserved_quantity is None:
                # Rafra√Æchir le solde pour le SL (apr√®s TP)
                if tp_order_placed:
                    try:
                        # Attendre un peu pour que l'ordre TP soit pris en compte
                        import asyncio
                        await asyncio.sleep(0.5)
                        
                        fresh_balances = await self.data_fetcher.get_account_balance()
                        fresh_available = float(fresh_balances[position['asset']]['free'])
                        
                        # Pour le SL, utiliser le minimum entre la quantit√© originale et ce qui reste
                        # Mais √©viter les quantit√©s trop petites qui causent des erreurs
                        if fresh_available < tp_order_quantity:
                            sl_quantity_to_use = await self.format_quantity(symbol, fresh_available * 0.95)
                            
                            # V√©rifier que la nouvelle quantit√© est suffisante
                            if sl_quantity_to_use > 0:
                                # V√©rifier la valeur NOTIONAL minimale (environ 5 USDC pour la plupart des paires)
                                notional_value = sl_quantity_to_use * stop_loss_price
                                if notional_value < 5.0:
                                    self.logger.warning(f"‚ö†Ô∏è Valeur SL trop petite {symbol}: {notional_value:.2f} USDC < 5 USDC - Skip SL")
                                    sl_quantity_to_use = 0  # Force skip du SL
                                else:
                                    self.logger.info(f"üîÑ Quantit√© SL re-ajust√©e {symbol}: ‚Üí {sl_quantity_to_use:.8f}")
                            else:
                                self.logger.warning(f"‚ö†Ô∏è Solde restant {symbol} insuffisant pour SL - Skip")
                                sl_quantity_to_use = 0
                        else:
                            # Assez de solde restant, utiliser la quantit√© TP
                            sl_quantity_to_use = tp_order_quantity
                        
                    except Exception as e:
                        self.logger.warning(f"‚ö†Ô∏è Erreur rafra√Æchissement pour SL: {e}")
                        sl_quantity_to_use = 0
                else:
                    # Pas de TP plac√©, utiliser la quantit√© originale
                    sl_quantity_to_use = tp_order_quantity
            else:
                self.logger.info(f"üéØ Utilisation quantit√© SL r√©serv√©e: {sl_quantity_to_use:.8f}")
                # V√©rifier NOTIONAL pour la quantit√© r√©serv√©e
                notional_value = sl_quantity_to_use * stop_loss_price
                if notional_value < 5.0:
                    self.logger.warning(f"‚ö†Ô∏è Valeur SL r√©serv√©e trop petite {symbol}: {notional_value:.2f} USDC < 5 USDC")
                    sl_quantity_to_use = 0
            
            # Essai STOP_LOSS_LIMIT avec trailing stop d'abord (recommand√© pour Spot)
            if 'STOP_LOSS_LIMIT' in supported_order_types and sl_quantity_to_use > 0:
                try:
                    order_params = {
                        'symbol': symbol,
                        'side': "SELL",
                        'order_type': "STOP_LOSS_LIMIT",
                        'quantity': sl_quantity_to_use,
                        'price': stop_loss_price,
                        'timeInForce': 'GTC'
                    }
                    
                    # Ajout du trailing stop si activ√©
                    if self.config.TRAILING_STOP_ENABLED and trailing_delta_bips:
                        order_params['trailingDelta'] = trailing_delta_bips
                        # Pour un trailing stop, stopPrice est optionnel - omis pour d√©marrage imm√©diat
                        self.logger.info(f"üìà Trailing Stop activ√©: {self.config.TRAILING_STOP_DISTANCE}% ({trailing_delta_bips} BIPS)")
                    else:
                        order_params['stopPrice'] = stop_loss_price
                    
                    sl_order = await self.data_fetcher.place_order(**order_params)
                    result['sl_order_id'] = sl_order['orderId']
                    
                    if self.config.TRAILING_STOP_ENABLED and trailing_delta_bips:
                        self.logger.info(f"‚úÖ SL automatique avec Trailing Stop (STOP_LOSS_LIMIT) plac√©: {self.config.TRAILING_STOP_DISTANCE}% trailing (ID: {sl_order['orderId']})")
                    else:
                        self.logger.info(f"‚úÖ SL automatique (STOP_LOSS_LIMIT) plac√©: {stop_loss_price:.6f} USDC (ID: {sl_order['orderId']})")
                    
                    sl_order_placed = True
                except Exception as e:
                    error_msg = f"STOP_LOSS_LIMIT: {e}"
                    result['errors'].append(error_msg)
                    self.logger.error(f"‚ùå Erreur {error_msg}")
            
            # Fallback: Essai STOP_LOSS si STOP_LOSS_LIMIT √©choue (SANS timeInForce)
            if not sl_order_placed and 'STOP_LOSS' in supported_order_types and sl_quantity_to_use > 0:
                try:
                    order_params = {
                        'symbol': symbol,
                        'side': "SELL",
                        'order_type': "STOP_LOSS",
                        'quantity': sl_quantity_to_use
                        # timeInForce pas support√© pour STOP_LOSS
                    }
                    
                    # Ajout du trailing stop si activ√©
                    if self.config.TRAILING_STOP_ENABLED and trailing_delta_bips:
                        order_params['trailingDelta'] = trailing_delta_bips
                        # Pour un trailing stop, stopPrice est optionnel
                        self.logger.info(f"üìà Trailing Stop activ√©: {self.config.TRAILING_STOP_DISTANCE}% ({trailing_delta_bips} BIPS)")
                    else:
                        order_params['stopPrice'] = stop_loss_price
                    
                    sl_order = await self.data_fetcher.place_order(**order_params)
                    result['sl_order_id'] = sl_order['orderId']
                    
                    if self.config.TRAILING_STOP_ENABLED and trailing_delta_bips:
                        self.logger.info(f"‚úÖ SL automatique avec Trailing Stop (STOP_LOSS) plac√©: {self.config.TRAILING_STOP_DISTANCE}% trailing (ID: {sl_order['orderId']})")
                    else:
                        self.logger.info(f"‚úÖ SL automatique (STOP_LOSS) plac√©: {stop_loss_price:.6f} USDC (ID: {sl_order['orderId']})")
                    
                    sl_order_placed = True
                except Exception as e:
                    error_msg = f"STOP_LOSS: {e}"
                    result['errors'].append(error_msg)
                    self.logger.error(f"‚ùå Erreur {error_msg}")
            
            if not sl_order_placed:
                self.logger.warning(f"‚ö†Ô∏è Impossible de placer SL automatique pour {symbol} - Gestion manuelle activ√©e")
            
            result['sl_order_placed'] = sl_order_placed
            
            # 3. Logging des r√©sultats - M√äME LOGIQUE
            if tp_order_placed and sl_order_placed:
                self.logger.info(f"üìä Ordres automatiques TP et SL configur√©s pour {symbol}")
            elif tp_order_placed:
                self.logger.info(f"üìä Ordre TP automatique configur√© pour {symbol} - SL en gestion manuelle")
            elif sl_order_placed:
                self.logger.info(f"üìä Ordre SL automatique configur√© pour {symbol} - TP en gestion manuelle")
            else:
                self.logger.warning(f"‚ö†Ô∏è Aucun ordre automatique pour {symbol} - Surveillance manuelle requise")
            
        except Exception as e:
            error_msg = f"Erreur setup ordres automatiques {symbol}: {e}"
            result['errors'].append(error_msg)
            self.logger.error(f"‚ùå {error_msg}")
            self.logger.warning("‚ö†Ô∏è Passage en gestion manuelle des SL/TP")
        
        return result
    
    async def run_test(self, dry_run: bool = True):
        """Lance le test des ordres SL/TP"""
        try:
            self.logger.info("üöÄ D√©marrage du test d'ordres SL/TP")
            self.logger.info(f"üß™ Mode: {'DRY RUN (simulation)' if dry_run else 'R√âEL (ordres plac√©s)'}")
            
            # Test de connexion
            await self.data_fetcher.test_connection()
            self.logger.info("‚úÖ Connexion Binance OK")
            
            # R√©cup√©ration des positions
            positions = await self.get_current_positions()
            
            if not positions:
                self.logger.warning("‚ö†Ô∏è Aucune position trouv√©e avec solde suffisant")
                return
            
            self.logger.info(f"üìä {len(positions)} position(s) trouv√©e(s):")
            for pos in positions:
                self.logger.info(f"   üí∞ {pos['symbol']}: {pos['quantity']:.6f} ({pos['value_usdc']:.2f} USDC)")
            
            # Annulation des ordres existants pour lib√©rer les soldes
            if not dry_run:
                self.logger.info("\nüóëÔ∏è Annulation des ordres existants...")
                for pos in positions:
                    await self.cancel_existing_orders(pos['symbol'])
            
            if dry_run:
                self.logger.info("\nüîç MODE SIMULATION - Aucun ordre ne sera r√©ellement plac√©")
                self.logger.info("Pour placer les ordres r√©ellement, utilisez: --real")
                return
            
            # Demande de confirmation
            self.logger.info(f"\n‚ö†Ô∏è ATTENTION: Vous allez placer des ordres R√âELS sur {len(positions)} position(s)")
            self.logger.info("üìã Configuration:")
            self.logger.info(f"   üéØ Take Profit: +{self.config.TAKE_PROFIT_PERCENT}%")
            self.logger.info(f"   üõ°Ô∏è Stop Loss: -{self.config.STOP_LOSS_PERCENT}%")
            if self.config.TRAILING_STOP_ENABLED:
                self.logger.info(f"   üìà Trailing Stop: {self.config.TRAILING_STOP_DISTANCE}% (30 BIPS)")
            
            response = input("\nü§î Confirmez-vous le placement de ces ordres ? (oui/non): ")
            if response.lower() not in ['oui', 'yes', 'y', 'o']:
                self.logger.info("‚ùå Test annul√© par l'utilisateur")
                return
            
            # Placement des ordres
            results = []
            for position in positions:
                self.logger.info(f"\n{'='*60}")
                result = await self.place_exit_orders_for_position(position)
                results.append(result)
            
            # R√©sum√©
            self.logger.info(f"\n{'='*60}")
            self.logger.info("üìä R√âSUM√â DU TEST:")
            
            total_positions = len(results)
            successful_tp = sum(1 for r in results if r['tp_order_placed'])
            successful_sl = sum(1 for r in results if r['sl_order_placed'])
            
            self.logger.info(f"   üìà Positions test√©es: {total_positions}")
            self.logger.info(f"   üéØ Take Profit plac√©s: {successful_tp}/{total_positions}")
            self.logger.info(f"   üõ°Ô∏è Stop Loss plac√©s: {successful_sl}/{total_positions}")
            
            # D√©tails des erreurs
            for result in results:
                if result['errors']:
                    self.logger.info(f"\n‚ùå Erreurs {result['symbol']}:")
                    for error in result['errors']:
                        self.logger.info(f"   ‚Ä¢ {error}")
            
            if successful_tp == total_positions and successful_sl == total_positions:
                self.logger.info("‚úÖ TOUS LES ORDRES ONT √âT√â PLAC√âS AVEC SUCC√àS!")
            else:
                self.logger.info("‚ö†Ô∏è Certains ordres ont √©chou√© - v√©rifiez les logs ci-dessus")
        
        except Exception as e:
            self.logger.error(f"‚ùå Erreur durant le test: {e}")
        
        finally:
            await self.data_fetcher.close()


async def main():
    """Point d'entr√©e principal"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Test des ordres SL/TP sur positions existantes')
    parser.add_argument('--real', action='store_true', help='Placer les ordres r√©ellement (sinon simulation)')
    args = parser.parse_args()
    
    tester = ExitOrderTester()
    await tester.run_test(dry_run=not args.real)


if __name__ == "__main__":
    asyncio.run(main())
